var mongoose = require('mongoose');
var crypto = require('crypto');
var Schema = mongoose.Schema;

var UserSchema = new Schema({
  firstName: {type: String, required: true},
  lastName: {type: String, required: true},
  email: {
    type: String, 
    required: true, 
    unique: true, 
    match: [/.+\@.+\..+/, "Please enter a valid e-mail address"]
  },
  password: {
    type: String, 
    required: true,
    validate: [
      function(password) {
        return password.length >= 7;
      },
      'Password must be at least 7 characters'
    ]
  },
  salt: {
    type: String
  },
  contacts: {

    
  }
  // provider: { // used to indicate strategy
  //   type: String
  // },
  // providerId: String, // indicate the user identifier for the authentication strategy
  // providerData: {} // use to store the user object retrieved from OAuth providers
});

// virtual attributes are accessible in program but 
// aren't written to the database
UserSchema.virtual('fullName').get(function() {
  return this.firstName + ' ' + this.lastName;
});

UserSchema.pre('save', function(next) {
  if (this.password) {
    // create an autogenerated pseudo-random hashing salt
    this.salt = new Buffer(crypto.randomBytes(16).toString('base64'), 'base64');
    
    // replace inputted password with hashed version
    this.password = this.hashPassword(this.password);
  }
  next();
});

UserSchema.methods.hashPassword = function(password) {
  return crypto.pbkdf2Sync(password, this.salt, 10000, 64).toString('base64');
};


// instance methods are invoked on instances of a model
UserSchema.methods.authenticate = function(password) {
  return this.password === this.hashPassword(password);
};

// static methods are invoked on the model 
UserSchema.statics.findByEmail = function (email, callback) {
  console.log(email);
  this.findOne({ email: email}, callback);
};

UserSchema.set('toJSON', {
  getters: true,
  virtuals: true
});


mongoose.model('User', UserSchema);